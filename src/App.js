import React, { useContext, useEffect, useState } from "react";

// UserContext oluÅŸturuluyor
const UserContext = React.createContext();

// UserProvider bileÅŸeni oluÅŸturuluyor
const UserProvider = ({ children }) => {
  // userState adÄ±nda bir state oluÅŸturuluyor ve useState hook'u kullanÄ±larak baÅŸlangÄ±Ã§ deÄŸeri veriliyor
  const [userState, setUserState] = useState({
    NamÄ±k: true,
    Eda: true,
    Suzan: true,
    Engin: true,
    Samet: true
  });

  // UserContext.Provider bileÅŸeni, userState ve setUserState deÄŸerlerini iÃ§eren bir context saÄŸlar.
  // Bu context, alt bileÅŸenler tarafÄ±ndan kullanÄ±labilir.
  return (
    <UserContext.Provider value={{ userState, setUserState }}>
      {children}
    </UserContext.Provider>
  );
};

// User bileÅŸeni oluÅŸturuluyor
const User = ({ name, online }) => {
  // KullanÄ±cÄ± adÄ±nÄ± ve Ã§evrimiÃ§i durumunu temsil eden bir bileÅŸen oluÅŸturuluyor.
  // Flex layout kullanÄ±larak bileÅŸenler yatay olarak hizalanÄ±yor.
  // Ã‡evrimiÃ§i durumuna gÃ¶re uygun bir emoji gÃ¶steriliyor.
  return (
    <div className="flex justify-center items-center border p-2 mb-2">
      <span className="mr-2">{name}:</span>
      <span>{online ? "ğŸŸ¢" : "ğŸ”´"}</span>
    </div>
  );
};

// App bileÅŸeni
function App() {
  // UserProvider bileÅŸeni, UserList bileÅŸenine iÃ§ iÃ§e geÃ§miÅŸ olarak kullanÄ±lÄ±yor.
  // Bu, UserList bileÅŸeninin User bileÅŸenlerine UserContext aracÄ±lÄ±ÄŸÄ±yla eriÅŸebilmesini saÄŸlar.
  return (
    <UserProvider>
      <UserList />
    </UserProvider>
  );
}

// UserList bileÅŸeni
const UserList = () => {
  // useContext hook'u kullanÄ±larak UserContext'ten userState ve setUserState deÄŸerleri alÄ±nÄ±yor.
  const { userState, setUserState } = useContext(UserContext);

  // useEffect hook'u kullanÄ±larak her 2 saniyede bir bir kullanÄ±cÄ±nÄ±n durumu deÄŸiÅŸtiriliyor.
  // setInterval fonksiyonu kullanÄ±larak belirli bir aralÄ±kta iÅŸlem gerÃ§ekleÅŸtiriliyor.
  useEffect(() => {
    const interval = setInterval(() => {
      // Rastgele bir kullanÄ±cÄ± seÃ§iliyor.
      const users = Object.keys(userState);
      const randomUser = users[Math.floor(Math.random() * users.length)];

      // SeÃ§ilen kullanÄ±cÄ±nÄ±n durumu tersine Ã§evriliyor.
      setUserState(prevState => ({
        ...prevState,
        [randomUser]: !prevState[randomUser]
      }));
    }, 2000);

    // setInterval fonksiyonunun sonlanmasÄ± iÃ§in clearInterval kullanÄ±lÄ±yor.
    // BÃ¶ylece bileÅŸen sonlandÄ±ÄŸÄ±nda gereksiz iÅŸlem yapÄ±lmasÄ±nÄ±n Ã¶nÃ¼ne geÃ§ilmiÅŸ oluyor.
    return () => clearInterval(interval);
  }, [userState, setUserState]);

  // userState iÃ§indeki her kullanÄ±cÄ± iÃ§in bir User bileÅŸeni oluÅŸturuluyor.
  // OluÅŸturulan User bileÅŸenleri bir div iÃ§erisine yerleÅŸtiriliyor ve sayfada listeleniyor.
  return (
    <div className="flex justify-center items-center h-screen">
      <div className="w-full max-w-md">
        {Object.entries(userState).map(([name, online]) => (
          <User key={name} name={name} online={online} />
        ))}
      </div>
    </div>
  );
};

export default App;
